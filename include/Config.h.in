#pragma once
#include <cstddef>
#include <cstdint>
#ifdef MM_HALF_PRECISION
#include "hls_half.h"
#endif
#include "hlslib/xilinx/Operators.h"

// 基础类型定义
using uint8_t = unsigned char;

// 数据类型定义
#ifdef MM_HALF_PRECISION
using Data_t = half;
using TTDataType = half;
#else
using Data_t = float;
using TTDataType = float;
#endif

// GEMM配置命名空间生成宏
#define GEMM_CONFIGS_START(index) namespace tt_core##index {
#define GEMM_CONFIGS_END }

// 为每个核心定义独立配置
GEMM_CONFIGS_START(0)
    // GEMM dimensions
    constexpr unsigned long kGemmN = ${TT_GEMM_N0};
    constexpr unsigned long kGemmK = ${TT_GEMM_K0};
    constexpr unsigned long kGemmM = ${TT_GEMM_M0};

    // Memory configurations - 每个核心独立配置
    constexpr int kMemoryWidthBytesN = ${TT_CORE0_MEMORY_WIDTH_N};
    constexpr int kMemoryWidthBytesK = ${TT_CORE0_MEMORY_WIDTH_K};
    constexpr int kMemoryWidthBytesM = ${TT_CORE0_MEMORY_WIDTH_M};

    constexpr int kMemoryWidthN = kMemoryWidthBytesN / sizeof(Data_t);
    constexpr int kMemoryWidthK = kMemoryWidthBytesK / sizeof(Data_t);
    constexpr int kMemoryWidthM = kMemoryWidthBytesM / sizeof(Data_t);

    // Compute configurations
    constexpr int kComputeTileSizeN = ${TT_CORE0_COMPUTE_TILE_N};
    constexpr int kComputeTileSizeM = ${TT_CORE0_COMPUTE_TILE_M};
    
    // Memory alignment
    constexpr int kMemoryAlignment = ${TT_CORE0_MEMORY_ALIGNMENT};
    
    // Width conversion checks
    #if kMemoryWidthM != kComputeTileSizeM
    #define TT_CORE0_CONVERT_WIDTH_M
    #endif

    #if kMemoryWidthN != kComputeTileSizeN
    #define TT_CORE0_CONVERT_WIDTH_N
    #endif
GEMM_CONFIGS_END

GEMM_CONFIGS_START(1)
    // Similar config for core 1
    constexpr unsigned long kGemmN = ${TT_GEMM_N1};
    constexpr unsigned long kGemmK = ${TT_GEMM_K1};
    constexpr unsigned long kGemmM = ${TT_GEMM_M1};

    constexpr int kMemoryWidthBytesN = ${TT_CORE1_MEMORY_WIDTH_N};
    constexpr int kMemoryWidthBytesK = ${TT_CORE1_MEMORY_WIDTH_K};
    constexpr int kMemoryWidthBytesM = ${TT_CORE1_MEMORY_WIDTH_M};

    constexpr int kMemoryWidthN = kMemoryWidthBytesN / sizeof(Data_t);
    constexpr int kMemoryWidthK = kMemoryWidthBytesK / sizeof(Data_t);
    constexpr int kMemoryWidthM = kMemoryWidthBytesM / sizeof(Data_t);

    constexpr int kComputeTileSizeN = ${TT_CORE1_COMPUTE_TILE_N};
    constexpr int kComputeTileSizeM = ${TT_CORE1_COMPUTE_TILE_M};
    
    constexpr int kMemoryAlignment = ${TT_CORE1_MEMORY_ALIGNMENT};
    
    #if kMemoryWidthM != kComputeTileSizeM
    #define TT_CORE1_CONVERT_WIDTH_M
    #endif

    #if kMemoryWidthN != kComputeTileSizeN
    #define TT_CORE1_CONVERT_WIDTH_N
    #endif
GEMM_CONFIGS_END

// Similar configs for cores 2 and 3...
GEMM_CONFIGS_START(2)
    constexpr unsigned long kGemmN = ${TT_GEMM_N2};
    constexpr unsigned long kGemmK = ${TT_GEMM_K2};
    constexpr unsigned long kGemmM = ${TT_GEMM_M2};

    constexpr int kMemoryWidthBytesN = ${TT_CORE2_MEMORY_WIDTH_N};
    constexpr int kMemoryWidthBytesK = ${TT_CORE2_MEMORY_WIDTH_K};
    constexpr int kMemoryWidthBytesM = ${TT_CORE2_MEMORY_WIDTH_M};

    constexpr int kMemoryWidthN = kMemoryWidthBytesN / sizeof(Data_t);
    constexpr int kMemoryWidthK = kMemoryWidthBytesK / sizeof(Data_t);
    constexpr int kMemoryWidthM = kMemoryWidthBytesM / sizeof(Data_t);

    constexpr int kComputeTileSizeN = ${TT_CORE2_COMPUTE_TILE_N};
    constexpr int kComputeTileSizeM = ${TT_CORE2_COMPUTE_TILE_M};
    
    constexpr int kMemoryAlignment = ${TT_CORE2_MEMORY_ALIGNMENT};
    
    #if kMemoryWidthM != kComputeTileSizeM
    #define TT_CORE2_CONVERT_WIDTH_M
    #endif

    #if kMemoryWidthN != kComputeTileSizeN
    #define TT_CORE2_CONVERT_WIDTH_N
    #endif
GEMM_CONFIGS_END

GEMM_CONFIGS_START(3)
    constexpr unsigned long kGemmN = ${TT_GEMM_N3};
    constexpr unsigned long kGemmK = ${TT_GEMM_K3};
    constexpr unsigned long kGemmM = ${TT_GEMM_M3};

    constexpr int kMemoryWidthBytesN = ${TT_CORE3_MEMORY_WIDTH_N};
    constexpr int kMemoryWidthBytesK = ${TT_CORE3_MEMORY_WIDTH_K};
    constexpr int kMemoryWidthBytesM = ${TT_CORE3_MEMORY_WIDTH_M};

    constexpr int kMemoryWidthN = kMemoryWidthBytesN / sizeof(Data_t);
    constexpr int kMemoryWidthK = kMemoryWidthBytesK / sizeof(Data_t);
    constexpr int kMemoryWidthM = kMemoryWidthBytesM / sizeof(Data_t);

    constexpr int kComputeTileSizeN = ${TT_CORE3_COMPUTE_TILE_N};
    constexpr int kComputeTileSizeM = ${TT_CORE3_COMPUTE_TILE_M};
    
    constexpr int kMemoryAlignment = ${TT_CORE3_MEMORY_ALIGNMENT};
    
    #if kMemoryWidthM != kComputeTileSizeM
    #define TT_CORE3_CONVERT_WIDTH_M
    #endif

    #if kMemoryWidthN != kComputeTileSizeN
    #define TT_CORE3_CONVERT_WIDTH_N
    #endif
GEMM_CONFIGS_END

// 全局TT配置
constexpr int kTTNumCores = ${TT_NUM_CORES};
constexpr int kTTInputSize = ${TT_INPUT_SIZE};
constexpr int kTTOutputSize = ${TT_OUTPUT_SIZE};
constexpr int kTTMaxRank = ${TT_MAX_RANK};

#ifdef TT_USE_CUSTOM_MODES
constexpr std::array<int, kTTNumCores> kTTInputModes = {${TT_INPUT_MODES}};
constexpr std::array<int, kTTNumCores> kTTOutputModes = {${TT_OUTPUT_MODES}};
constexpr std::array<int, kTTNumCores + 1> kTTRanks = {${TT_RANKS}};
#endif

// Operators 
using OperatorMap = hlslib::op::${MM_MAP_OP}<Data_t>;
using OperatorReduce = hlslib::op::${MM_REDUCE_OP}<Data_t>;
